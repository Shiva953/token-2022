/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  none,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type WritableAccount,
} from '@solana/web3.js';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_CONFIDENTIAL_TRANSFER_FEE_CONFIG_DISCRIMINATOR = 12;

export function getInitializeConfidentialTransferFeeConfigDiscriminatorBytes() {
  return getU8Encoder().encode(
    INITIALIZE_CONFIDENTIAL_TRANSFER_FEE_CONFIG_DISCRIMINATOR
  );
}

export type InitializeConfidentialTransferFeeConfigInstruction<
  TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS,
  TAccountMint extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeConfidentialTransferFeeConfigInstructionData = {
  discriminator: number;
  /** Optional confidential transfer fee authority */
  authority: Option<Address>;
  /** ElGamal public key used to encrypt withheld fees */
  withdrawWithheldAuthorityElgamalPubkey: Address;
};

export type InitializeConfidentialTransferFeeConfigInstructionDataArgs = {
  /** Optional confidential transfer fee authority */
  authority?: OptionOrNullable<Address>;
  /** ElGamal public key used to encrypt withheld fees */
  withdrawWithheldAuthorityElgamalPubkey: Address;
};

export function getInitializeConfidentialTransferFeeConfigInstructionDataEncoder(): Encoder<InitializeConfidentialTransferFeeConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['authority', getOptionEncoder(getAddressEncoder())],
      ['withdrawWithheldAuthorityElgamalPubkey', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_CONFIDENTIAL_TRANSFER_FEE_CONFIG_DISCRIMINATOR,
      authority: value.authority ?? none(),
    })
  );
}

export function getInitializeConfidentialTransferFeeConfigInstructionDataDecoder(): Decoder<InitializeConfidentialTransferFeeConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['authority', getOptionDecoder(getAddressDecoder())],
    ['withdrawWithheldAuthorityElgamalPubkey', getAddressDecoder()],
  ]);
}

export function getInitializeConfidentialTransferFeeConfigInstructionDataCodec(): Codec<
  InitializeConfidentialTransferFeeConfigInstructionDataArgs,
  InitializeConfidentialTransferFeeConfigInstructionData
> {
  return combineCodec(
    getInitializeConfidentialTransferFeeConfigInstructionDataEncoder(),
    getInitializeConfidentialTransferFeeConfigInstructionDataDecoder()
  );
}

export type InitializeConfidentialTransferFeeConfigInput<
  TAccountMint extends string = string,
> = {
  /** The SPL Token mint. */
  mint: Address<TAccountMint>;
  authority?: InitializeConfidentialTransferFeeConfigInstructionDataArgs['authority'];
  withdrawWithheldAuthorityElgamalPubkey: InitializeConfidentialTransferFeeConfigInstructionDataArgs['withdrawWithheldAuthorityElgamalPubkey'];
};

export function getInitializeConfidentialTransferFeeConfigInstruction<
  TAccountMint extends string,
  TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS,
>(
  input: InitializeConfidentialTransferFeeConfigInput<TAccountMint>,
  config?: { programAddress?: TProgramAddress }
): InitializeConfidentialTransferFeeConfigInstruction<
  TProgramAddress,
  TAccountMint
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_2022_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.mint)],
    programAddress,
    data: getInitializeConfidentialTransferFeeConfigInstructionDataEncoder().encode(
      args as InitializeConfidentialTransferFeeConfigInstructionDataArgs
    ),
  } as InitializeConfidentialTransferFeeConfigInstruction<
    TProgramAddress,
    TAccountMint
  >;

  return instruction;
}

export type ParsedInitializeConfidentialTransferFeeConfigInstruction<
  TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The SPL Token mint. */
    mint: TAccountMetas[0];
  };
  data: InitializeConfidentialTransferFeeConfigInstructionData;
};

export function parseInitializeConfidentialTransferFeeConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeConfidentialTransferFeeConfigInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount(),
    },
    data: getInitializeConfidentialTransferFeeConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
